---
import { getProjects } from '../lib/projects.js';
import WebGLScene from './webgl/WebGLScene.astro';

const projects = await getProjects();

const navItems = [
	{
		name: "Works",
		class: ""
	},
	{
		name: "About",
		class: ""
	},
	{
		name: "Private Projects",
		class: "opacity-40 pointer-events-none mt-6"
	},
	{
		name: "Photos",
		class: ""
	},
	{
		name: "Playground",
		class: ""
	}
];

const playgrounds = [
	"#001_projectName",
	"#002_projectName",
	"#003_projectName",
	"#004_projectName",
	"#005_projectName",
	"#006_projectName",
	"#007_projectName"
];
---

<main class="relative h-[750vh]">
	<WebGLScene />
	
	<div class="fixed top-[15vh] left-0 grid grid-cols-4 gap-x-[8px] gap-y-10 w-full px-s-16-60 z-10 lg:grid-cols-6 lg:gap-x-4 lg:gap-y-0 lg:left-0 lg:top-more-40 lg:px-s-20-60">
		<div class="relative col-start-3 lg:hidden">
			<div class="absolute top-0 right-[calc(100%+3px)] w-[2px] h-4/5 bg-black01"></div>
			<div class="" data-name="name-area">Works</div>
		</div>

		<div class="hidden lg:block col-start-4">
			<div class="grid grid-cols-1">
				{navItems.map((item, index) => (
					<a href={`#${item.name.toLowerCase().replace(/\s+/g, '-')}`} class={`relative ${item.class}`}>
						<div class="absolute top-0 right-[calc(100%+3px)] w-[2px] h-4/5 bg-black01 hidden"></div>
						{item.name}
					</a>
				))}
			</div>
		</div>

		<div class="relative col-span-4 lg:col-span-6">
			<!-- works -->
			<div data-name="works-info" class="absolute top-0 left-0 w-full h-auto grid grid-cols-4 gap-x-[8px] gap-y-8 lg:grid-cols-6 lg:gap-x-4">
				<div class=" col-span-2 col-start-3 grid grid-cols-1 gap-y-[0.7em] lg:col-start-5 lg:mt-24">
					{projects.map(project => (
						<a
							href={`/project/${project.slug}`}
							class="project-link"
							data-name="kinetic-txt"
							data-text={project.title}
						>
							{project.title}
						</a>
						
						<!-- モーダルリンク（JS有効時） -->
						<button 
							class="project-modal-btn text-left leading-tight cursor-pointer" 
							data-project-slug={project.slug}
							style="display: none;"
							data-name="kinetic-txt"
							data-text={project.title}
						>
							{project.title}
						</button>
					))}

				</div>
			</div>

			<!-- about -->
			<div data-name="about-area" class="absolute top-0 left-0 w-full h-auto grid grid-cols-4 gap-x-[8px] gap-y-10 lg:grid-cols-6 lg:gap-x-4 lg:gap-y-14">
				<p class="grid grid-cols-1 col-span-2 col-start-3 text-more-20 -tracking-wide leading-normal whitespace-nowrap lg:text-[3.4vw] lg:tracking-tighter lg:leading-tight lg:col-start-5">
					<span data-name="kinetic-txt">Web Developer</span>
					<span data-name="kinetic-txt">Who Love Design</span>
					<span data-name="kinetic-txt">& Animation</span>
				</p>
				<div class="grid grid-cols-1 gap-y-[1.2em] col-span-2 col-start-3 lg:col-span-2 lg:grid-cols-2 lg:gap-x-4 lg:col-start-5 lg:col-span-1">
					<p data-name="kinetic-txt" class="">born in 1988 and worked as a designer in my twenties and entered the web industry as an engineer in my thirties. I like to think about design and direction.</p>
					<p data-name="kinetic-txt" class="lg:mt-[3em] opacity-40">1988年生まれ。20代はデザイナー、30代からweb業界に入りエンジニアとして働いています。デザインや演出を考えるのが好きです。</p>
				</div>
			</div>

			<!-- photos -->
			<div data-name="photos-area" class="absolute top-0 left-0 w-full h-auto grid grid-cols-4 gap-x-[8px] gap-y-8 lg:grid-cols-6">
				<p data-name="kinetic-txt" class="col-span-2 col-start-3 lg:col-start-5 lg:col-span-1 lg:mt-24">These are the photos I usually take in private. Take a look if you like! My favorite camera is FUJIFILM X-E4.</p>
			</div>

			<!-- playground -->
			<div data-name="playground-area" class="absolute top-0 left-0 w-full h-auto grid grid-cols-4 gap-x-[8px] gap-y-8 lg:grid-cols-6">

				<p data-name="kinetic-txt" class="col-span-2 col-start-3 lg:col-start-5 lg:col-span-1 lg:mt-24">This is a playground for learning and outputting 3D staging on a regular basis.</p>
				<div class=" col-span-2 col-start-3 grid grid-cols-1 gap-y-[0.4em] lg:col-start-5 lg:col-span-1">
					{playgrounds.map((playground, index) => (
						<a 
							href={`/${playground.toLowerCase().replace(/\s+/g, '-')}.html`}
							class=""
							data-name="kinetic-txt"
						>
							{playground}
						</a>
					))}
				</div>
			</div>			
		</div>
	</div>
	<!-- モーダルコンテナ -->
	<div id="modal-container"></div>	
</main>

<script>
	// プログレッシブエンハンスメント
	document.addEventListener('DOMContentLoaded', () => {
		// JSが有効な場合、モーダルボタンを表示
		const modalBtns = document.querySelectorAll('.project-modal-btn') as NodeListOf<HTMLElement>;
		const normalLinks = document.querySelectorAll('.project-link') as NodeListOf<HTMLElement>;
		
		modalBtns.forEach((btn, index) => {
			btn.style.display = 'block';
			normalLinks[index].style.display = 'none';
			
			btn.addEventListener('click', () => {
				const slug = btn.dataset.projectSlug;
				if (slug) {
					openProjectModal(slug);
				}
			});
		});

		// ブラウザの戻る/進むボタン対応
		window.addEventListener('popstate', handlePopState);
		
		// 初期ロード時のURL確認
		handlePopState();
	});

	async function openProjectModal(slug: string) {
		// URLを更新（履歴に追加）
		history.pushState({ modal: true, slug }, '', `/project/${slug}?modal=1`);
		
		// モーダルコンテンツを取得
		try {
			const response = await fetch(`/project/${slug}?partial=1`);
			const html = await response.text();
			
			// DOMパーサーを使用してHTMLを解析
			const parser = new DOMParser();
			const doc = parser.parseFromString(html, 'text/html');
			
			// data-name="project-page"の要素を取得
			const projectPageElement = doc.querySelector('[data-name="project-page"]');
			
			if (projectPageElement) {
				// 要素のouterHTMLを取得（要素全体を含む）
				const projectPageHtml = projectPageElement.outerHTML;
				showModal(projectPageHtml);
			} else {
				// 要素が見つからない場合はフォールバック
				console.error('Project page element not found');
				window.location.href = `/project/${slug}`;
			}
			
		} catch (error) {
			console.error('Error fetching project:', error);
			// フォールバック：通常ページに遷移
			window.location.href = `/project/${slug}`;
		}
	}

	function showModal(content: string) {
		const container = document.getElementById('modal-container');
		if (!container) return;
		
		container.innerHTML = `
			<div class="modal-overlay">
				<div class="modal-content">
				${content}
				</div>
			</div>
		`;
		
		// モーダル表示
		container.style.display = 'block';
		
		// イベントリスナー
		const overlay = container.querySelector('.modal-overlay') as HTMLElement;
		const closeBtn = container.querySelector('.modal-close') as HTMLElement;
		const backToHome = container.querySelector('[data-name="back-to-home"]') as HTMLElement;

		if (overlay) {
			overlay.addEventListener('click', (e) => {
				if (e.target === overlay) closeModal();
			});
		}
		
		if (closeBtn) {
			closeBtn.addEventListener('click', closeModal);
		}
		
		if (backToHome) {
			backToHome.addEventListener('click', (e) => {
				e.preventDefault();
				closeModal();
			});
		}
		
		// ESCキーで閉じる
		document.addEventListener('keydown', handleEscKey);
	}

	function closeModal() {
		const container = document.getElementById('modal-container');
		if (!container) return;
		
		container.style.display = 'none';
		container.innerHTML = '';
		// document.body.style.overflow = '';
		
		// URLを戻す
		history.pushState({}, '', '/');
		
		document.removeEventListener('keydown', handleEscKey);
	}

	function handleEscKey(e: KeyboardEvent) {
		if (e.key === 'Escape') closeModal();
	}

	function handlePopState() {
		const url = new URL(window.location.href);
		const isModal = url.searchParams.has('modal');
		const slug = url.pathname.match(/\/project\/(.+)/)?.[1];
		
		if (isModal && slug) {
			openProjectModal(slug);
		} else {
			closeModal();
		}
	}
</script>


<style lang="scss" is:global>
	.modal-overlay {
		position: fixed;
		top: 0;
		left: 0;
		display: flex;
		align-items: center;
		justify-content: center;
		width: 100%;
		height: 100%;
		padding: 0 0 0 var(--s-16-60);
		z-index: 1000;
	}

	.modal-content {
		position: relative;
		width: 100%;
		height: 100%;
		// clip-path: inset(0 0 0 0%);
	}

	.modal-close {
		position: absolute;
		top: 1rem;
		right: 1rem;
		background: none;
		border: none;
		font-size: 2rem;
		cursor: pointer;
		color: #666;
	}

	#modal-container {
		display: none;
	}
</style>